#!/usr/bin/env python
###############################################################
# Python version of the idascript utility for IDA.
#
# Original idascript utility: http://www.hexblog.com/?p=128
#
# Craig Heffner
# 14-November-2012
# http://www.tacnetsol.com
# http://www.devttys0.com
###############################################################

from __future__ import print_function
import os
import sys
import tempfile
import subprocess

IDA_INSTALL_PATH = "%%IDA_INSTALL_PATH%%"

try:
    import magic
except:
    print("libmagic module not found, automatic detection of 64bit binaries won't work (try to pip install python-magic-bin==0.4.14)", file=sys.stderr)
    magic = None

fp = tempfile.NamedTemporaryFile(delete=False)
idc_args = ['__idascript_active__', fp.name]

# Check usage
if len(sys.argv) < 2:
    print("", file=sys.stderr)
    print("Usage: %s [--64bit] <target file> <ida script file> [script arguments]" % os.path.basename(sys.argv[0]), file=sys.stderr)
    print("", file=sys.stderr)
    sys.exit(1)

# Always use the 64-bit version of IDA if it was explicitly specified
if sys.argv[1] == '--64bit':
    suffix = '64'
    sys.argv.pop(1)
else:
    suffix = ''

# Get IDB / script file from command line
if len(sys.argv) >= 3:
    idb = os.path.abspath(sys.argv[1])
    idc = os.path.abspath(sys.argv[2])
    idc_args += sys.argv[3:]

    if idb.endswith('.i64'):
        suffix = '64'

    if not magic is None:
        try:
            m=magic.Magic(magic.MAGIC_NONE)
            if '64-bit' in m.from_file(idb):
                suffix = '64'
        except:
            print("The 'import magic' module is not from the expected 'file-magic' package. Automatic detection of 64bit binaries won't work.", file=sys.stderr)

else:
    idc = os.path.abspath(sys.argv[1])
    idb = "-t"
    idc_args += sys.argv[2:]

# Use the right IDA executable for the right platform
if sys.platform == 'win32':
    ida = 'ida' + suffix
else:
    ida = 'ida' + suffix

# Windows has a .exe file extension
if sys.platform == 'win32':
    ida += '.exe'

# Run IDA
subprocess.call([os.path.join(IDA_INSTALL_PATH, ida), '-A', '-S' + idc + ' ' + ' '.join(idc_args), idb])

# Display contents of output file, then clean up
if os.path.exists(fp.name):
    print("")
    print(open(fp.name).read())
    fp.close()
    os.unlink(fp.name)

